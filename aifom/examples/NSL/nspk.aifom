Problem: NSPK;
% Modeling the NSPK protocol with confidential channels
% Finds have the famous attack of Lowe

Types:
Honest = {...};
Dishon = {...};
Agent  = Honest ++ Dishon;

Sets:
challenged(Honest,Agent), responded(Honest,Agent);

Functions:
public pair/2;
private inv/1;  %% actually we do not need it...

Facts:
iknows/1, attack/0, cnfCh/2;

Rules:

% Attacker rules
a1(A: Agent)
  => iknows(A);
a2(M1: untyped, M2: untyped)
  iknows(pair(M1,M2)) => iknows(M1).iknows(M2);
a3(M1: untyped, M2: untyped)
  iknows(M1).iknows(M2) => iknows(pair(M1,M2));
a4(H: Honest, M: untyped)
  iknows(H).iknows(M) => cnfCh(H,M);
a5(D: Dishon, M: untyped) cnfCh(D,M) => iknows(M);
a6(NA: value)
  =[NA]=> iknows(NA);

% Protocol rules
step1(A: Honest, B: Agent, NA: value)
  =[NA]=> cnfCh(B,pair(NA,A)).NA in challenged(A,B);

step2(B: Honest, A: Agent, NA: value, NB: value)
  cnfCh(B,pair(NA,A)).
    =[NB]=> cnfCh(A,pair(NA,NB)).NB in challenged(B,A);

step3(A: Honest, B: Agent, NA: value, NB: value)
  cnfCh(A,pair(NA,NB)). NA in challenged(A,B)
    => cnfCh(B,NB).NA in responded(A,B);

step3receive(B: Honest, A: Agent, NB: value)
  cnfCh(B,NB).NB in challenged(B,A)
    => NB in responded(B,A);

% Attack definition
att1(A: Honest, B: Honest, NA: value)
  iknows(NA). NA in challenged(A,B) => attack;
att2(A: Honest, B: Honest, NA: value)
  iknows(NA). NA in responded(A,B) => attack;
