type token =
  | CHOICE
  | STAR
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | NEW
  | OUT
  | IN
  | IDENT of (Pitptree.ident)
  | ATIDENT of (Pitptree.ident)
  | STRING of (Pitptree.ident)
  | PROJECTION of (Pitptree.ident)
  | INT of (int)
  | REPL
  | IF
  | THEN
  | ELSE
  | EQUAL
  | FUN
  | EQUATION
  | REDUCTION
  | PREDICATE
  | PROCESS
  | SLASH
  | DOT
  | EOF
  | LET
  | QUERY
  | BEFORE
  | PUTBEGIN
  | NONINTERF
  | EVENT
  | NOT
  | ELIMTRUE
  | FREE
  | SUCHTHAT
  | CLAUSES
  | RED
  | EQUIV
  | EQUIVEQ
  | WEDGE
  | DIFF
  | COLON
  | NOUNIF
  | PHASE
  | BARRIER
  | AMONG
  | WEAKSECRET
  | PARAM
  | ORTEXT
  | FAIL
  | GREATER
  | TYPE
  | SET
  | FORALL
  | CONST
  | INJEVENT
  | OR
  | CHANNEL
  | LETFUN
  | DEFINE
  | EXPAND
  | YIELD
  | LEQ
  | PROBA
  | LBRACE
  | RBRACE
  | PROOF
  | EQUIVALENCE
  | OTHERWISE
  | TABLE
  | INSERT
  | GET

open Parsing;;
let _ = parse_error;;
# 2 "pitparser.mly"
(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2017                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
# 31 "pitparser.mly"

open Parsing_helper
open Ptree
open Pitptree
exception Syntax

# 118 "pitparser.ml"
let yytransl_const = [|
  257 (* CHOICE *);
  258 (* STAR *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* BAR *);
  265 (* SEMI *);
  266 (* NEW *);
  267 (* OUT *);
  268 (* IN *);
  274 (* REPL *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* EQUAL *);
  279 (* FUN *);
  280 (* EQUATION *);
  281 (* REDUCTION *);
  282 (* PREDICATE *);
  283 (* PROCESS *);
  284 (* SLASH *);
  285 (* DOT *);
    0 (* EOF *);
  286 (* LET *);
  287 (* QUERY *);
  288 (* BEFORE *);
  289 (* PUTBEGIN *);
  290 (* NONINTERF *);
  291 (* EVENT *);
  292 (* NOT *);
  293 (* ELIMTRUE *);
  294 (* FREE *);
  295 (* SUCHTHAT *);
  296 (* CLAUSES *);
  297 (* RED *);
  298 (* EQUIV *);
  299 (* EQUIVEQ *);
  300 (* WEDGE *);
  301 (* DIFF *);
  302 (* COLON *);
  303 (* NOUNIF *);
  304 (* PHASE *);
  305 (* BARRIER *);
  306 (* AMONG *);
  307 (* WEAKSECRET *);
  308 (* PARAM *);
  309 (* ORTEXT *);
  310 (* FAIL *);
  311 (* GREATER *);
  312 (* TYPE *);
  313 (* SET *);
  314 (* FORALL *);
  315 (* CONST *);
  316 (* INJEVENT *);
  317 (* OR *);
  318 (* CHANNEL *);
  319 (* LETFUN *);
  320 (* DEFINE *);
  321 (* EXPAND *);
  322 (* YIELD *);
  323 (* LEQ *);
  324 (* PROBA *);
  325 (* LBRACE *);
  326 (* RBRACE *);
  327 (* PROOF *);
  328 (* EQUIVALENCE *);
  329 (* OTHERWISE *);
  330 (* TABLE *);
  331 (* INSERT *);
  332 (* GET *);
    0|]

let yytransl_block = [|
  269 (* IDENT *);
  270 (* ATIDENT *);
  271 (* STRING *);
  272 (* PROJECTION *);
  273 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\001\000\001\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\025\000\025\000\021\000\021\000\006\000\006\000\011\000\011\000\
\026\000\026\000\026\000\016\000\016\000\027\000\027\000\008\000\
\008\000\007\000\007\000\028\000\028\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\030\000\030\000\029\000\029\000\031\000\031\000\019\000\019\000\
\018\000\018\000\032\000\032\000\032\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\035\000\
\035\000\033\000\033\000\036\000\036\000\036\000\036\000\034\000\
\034\000\017\000\017\000\017\000\017\000\039\000\039\000\040\000\
\040\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\042\000\042\000\038\000\038\000\043\000\043\000\043\000\
\043\000\041\000\041\000\044\000\044\000\022\000\022\000\014\000\
\014\000\045\000\045\000\046\000\046\000\009\000\009\000\010\000\
\010\000\012\000\012\000\047\000\047\000\047\000\047\000\023\000\
\023\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\049\000\049\000\053\000\053\000\050\000\050\000\051\000\
\051\000\051\000\051\000\051\000\054\000\054\000\052\000\052\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\055\000\055\000\048\000\048\000\056\000\056\000\057\000\057\000\
\003\000\003\000\003\000\004\000\004\000\000\000\000\000\000\000\
\000\000\000\000"

let yylen = "\002\000\
\005\000\010\000\012\000\005\000\007\000\005\000\004\000\007\000\
\008\000\005\000\007\000\006\000\009\000\006\000\009\000\006\000\
\006\000\006\000\006\000\004\000\006\000\004\000\006\000\004\000\
\004\000\006\000\004\000\005\000\004\000\005\000\006\000\004\000\
\004\000\007\000\003\000\009\000\007\000\000\000\004\000\005\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\001\000\003\000\003\000\000\000\003\000\001\000\
\000\000\002\000\003\000\005\000\003\000\003\000\000\000\001\000\
\001\000\001\000\000\000\003\000\001\000\001\000\004\000\004\000\
\006\000\001\000\003\000\003\000\004\000\003\000\003\000\003\000\
\003\000\001\000\001\000\000\000\005\000\001\000\003\000\001\000\
\003\000\001\000\001\000\004\000\004\000\004\000\001\000\006\000\
\006\000\003\000\003\000\004\000\003\000\003\000\006\000\004\000\
\004\000\004\000\003\000\003\000\005\000\002\000\006\000\003\000\
\001\000\001\000\000\000\006\000\004\000\005\000\003\000\001\000\
\000\000\006\000\006\000\002\000\006\000\002\000\000\000\002\000\
\000\000\004\000\006\000\001\000\003\000\005\000\002\000\002\000\
\006\000\003\000\001\000\001\000\000\000\006\000\004\000\005\000\
\003\000\001\000\000\000\003\000\005\000\003\000\001\000\001\000\
\000\000\003\000\000\000\006\000\005\000\005\000\004\000\006\000\
\004\000\004\000\006\000\003\000\001\000\003\000\003\000\004\000\
\003\000\003\000\001\000\004\000\002\000\005\000\001\000\001\000\
\006\000\005\000\007\000\007\000\004\000\007\000\004\000\007\000\
\006\000\007\000\009\000\003\000\007\000\004\000\003\000\003\000\
\006\000\002\000\000\000\002\000\000\000\002\000\000\000\001\000\
\003\000\003\000\004\000\002\000\003\000\001\000\001\000\000\000\
\004\000\006\000\001\000\003\000\003\000\004\000\003\000\003\000\
\007\000\004\000\006\000\006\000\008\000\006\000\008\000\003\000\
\003\000\001\000\001\000\000\000\001\000\001\000\003\000\003\000\
\000\000\001\000\003\000\003\000\001\000\002\000\002\000\002\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\238\000\
\000\000\239\000\229\000\230\000\240\000\000\000\000\000\000\000\
\241\000\000\000\000\000\000\000\000\000\000\000\070\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\083\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\114\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\000\000\000\000\000\000\000\000\000\124\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\000\
\048\000\041\000\042\000\043\000\047\000\045\000\046\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\175\000\000\000\000\000\000\000\000\000\000\000\000\000\176\000\
\000\000\000\000\000\000\000\000\000\000\232\000\235\000\236\000\
\000\000\000\000\080\000\000\000\000\000\000\000\000\000\000\000\
\076\000\000\000\064\000\065\000\000\000\000\000\066\000\062\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\152\000\000\000\000\000\000\000\108\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\099\000\000\000\089\000\000\000\
\000\000\000\000\024\000\087\000\000\000\007\000\000\000\027\000\
\000\000\032\000\000\000\150\000\055\000\000\000\154\000\000\000\
\000\000\000\000\000\000\169\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\140\000\128\000\000\000\000\000\
\000\000\000\000\020\000\025\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\029\000\000\000\
\050\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\173\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
\000\000\081\000\071\000\072\000\077\000\000\000\000\000\053\000\
\006\000\000\000\004\000\000\000\000\000\010\000\000\000\000\000\
\000\000\112\000\000\000\000\000\000\000\120\000\000\000\000\000\
\000\000\092\000\093\000\104\000\100\000\105\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\168\000\000\000\136\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\028\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\227\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\030\000\052\000\
\000\000\170\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\207\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\191\000\000\000\192\000\
\000\000\000\000\000\000\040\000\000\000\000\000\068\000\000\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\109\000\
\000\000\060\000\000\000\000\000\021\000\085\000\023\000\000\000\
\026\000\149\000\031\000\000\000\000\000\133\000\000\000\000\000\
\000\000\138\000\000\000\000\000\000\000\000\000\019\000\016\000\
\017\000\018\000\000\000\000\000\000\000\000\000\224\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\
\213\000\000\000\000\000\000\000\000\000\058\000\000\000\000\000\
\000\000\000\000\172\000\000\000\000\000\000\000\000\000\202\000\
\000\000\000\000\000\000\000\000\000\000\190\000\000\000\000\000\
\000\000\000\000\073\000\000\000\163\000\160\000\000\000\000\000\
\103\000\000\000\000\000\096\000\000\000\097\000\008\000\034\000\
\000\000\000\000\000\000\000\000\146\000\130\000\000\000\126\000\
\123\000\122\000\125\000\005\000\000\000\000\000\225\000\000\000\
\209\000\000\000\000\000\000\000\214\000\000\000\037\000\011\000\
\059\000\000\000\000\000\000\000\174\000\000\000\178\000\201\000\
\205\000\203\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\134\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\177\000\000\000\000\000\000\000\000\000\000\000\
\000\000\193\000\185\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\118\000\000\000\131\000\000\000\000\000\137\000\
\015\000\210\000\000\000\000\000\000\000\000\000\036\000\180\000\
\179\000\184\000\182\000\189\000\000\000\000\000\186\000\000\000\
\000\000\002\000\116\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\144\000\000\000\000\000\000\000\187\000\
\003\000\000\000\142\000\000\000\158\000\000\000\000\000\000\000\
\000\000\156\000"

let yydgoto = "\006\000\
\032\000\033\000\037\000\041\000\110\000\124\000\237\000\238\000\
\111\002\053\000\083\000\051\000\219\000\248\000\159\001\067\000\
\091\000\068\000\073\000\134\000\200\000\249\000\085\000\201\000\
\202\000\180\001\052\000\239\000\111\000\112\000\074\000\070\000\
\135\000\117\001\136\000\118\001\043\001\044\001\236\001\176\000\
\044\002\045\001\045\002\081\000\086\000\157\002\173\000\160\001\
\198\001\071\002\187\001\188\001\110\002\189\001\161\001\038\000\
\039\000"

let yysindex = "\018\003\
\215\005\215\005\130\000\026\255\203\255\000\000\044\255\104\255\
\104\255\156\255\196\255\058\255\029\000\051\000\135\000\047\002\
\057\000\206\255\015\255\065\000\057\000\073\000\089\000\057\000\
\057\000\112\000\122\000\151\000\166\000\052\255\167\000\000\000\
\033\255\000\000\000\000\000\000\000\000\228\255\054\000\133\000\
\000\000\200\000\203\255\212\000\221\000\239\000\000\000\008\255\
\246\000\252\000\007\001\203\255\007\001\203\255\010\001\192\255\
\016\001\063\001\015\001\081\255\019\001\135\255\037\001\050\001\
\054\001\055\001\042\001\033\001\158\005\059\001\194\000\068\001\
\043\001\075\001\173\255\072\001\241\004\121\255\080\005\073\001\
\081\001\082\001\040\001\077\001\215\005\203\255\120\255\087\001\
\090\001\086\001\080\001\091\001\007\001\007\001\093\001\083\001\
\107\001\033\000\135\001\136\001\112\001\195\001\142\001\073\005\
\073\005\130\000\130\000\026\255\203\255\246\255\143\001\000\000\
\203\255\203\255\203\255\203\255\203\255\203\255\203\255\035\255\
\110\001\138\001\057\000\123\001\035\001\128\001\191\003\035\255\
\130\001\077\001\073\005\063\001\156\001\154\255\160\001\000\000\
\155\001\063\001\035\255\144\001\122\001\126\001\063\001\063\001\
\063\001\063\001\193\255\215\005\063\001\063\001\063\001\063\001\
\063\001\193\255\178\001\179\001\215\005\179\001\035\255\215\005\
\063\001\215\005\035\255\215\005\203\255\077\001\057\000\035\255\
\145\001\184\001\000\000\072\005\223\255\211\002\182\001\000\000\
\180\001\211\002\024\255\215\005\215\005\171\001\176\001\202\000\
\035\255\215\005\077\001\042\006\035\255\035\255\215\005\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\137\001\
\195\001\197\001\035\255\073\005\196\001\209\001\212\001\214\001\
\000\000\125\005\042\006\207\000\206\001\226\001\227\001\000\000\
\232\001\233\001\017\000\052\005\228\255\000\000\000\000\000\000\
\035\000\203\255\000\000\244\001\044\001\159\001\215\001\186\255\
\000\000\008\255\000\000\000\000\246\001\006\002\000\000\000\000\
\019\002\215\005\203\255\215\005\203\255\027\002\215\005\029\002\
\000\000\164\255\189\255\063\001\000\000\199\255\030\002\036\002\
\063\001\057\000\057\000\037\002\230\000\040\002\106\001\018\002\
\000\000\004\002\173\005\050\000\000\000\173\005\000\000\203\255\
\000\002\023\002\000\000\000\000\049\002\000\000\154\005\000\000\
\002\002\000\000\101\005\000\000\000\000\007\001\000\000\203\255\
\203\255\203\255\206\255\000\000\052\002\051\002\211\002\053\002\
\058\002\054\002\062\002\070\002\000\000\000\000\211\002\073\002\
\122\255\055\002\000\000\000\000\215\005\215\005\065\002\066\002\
\067\002\007\001\000\000\086\002\091\002\042\006\087\002\098\002\
\042\006\207\000\101\002\198\005\104\002\107\002\000\000\215\005\
\000\000\195\001\114\002\114\255\121\002\042\006\042\006\042\006\
\023\255\000\000\194\002\251\000\129\255\042\006\090\002\108\002\
\021\001\128\002\163\000\132\002\135\002\073\005\000\000\023\000\
\203\255\000\000\000\000\000\000\000\000\095\002\035\255\000\000\
\000\000\106\255\000\000\108\255\007\001\000\000\124\002\215\005\
\063\001\000\000\131\002\137\002\142\002\000\000\112\002\252\000\
\192\000\000\000\000\000\000\000\000\000\000\000\129\002\215\005\
\150\002\215\005\147\002\215\005\102\002\215\005\151\002\008\255\
\008\255\008\255\000\000\211\002\000\000\177\002\179\002\211\002\
\164\002\211\002\140\002\178\002\140\002\215\005\000\000\000\000\
\215\005\215\005\215\005\165\002\175\002\042\006\071\000\199\002\
\000\000\121\002\042\006\251\002\170\002\189\002\042\006\042\006\
\215\005\042\006\042\006\042\006\153\002\190\002\000\000\000\000\
\196\002\000\000\047\000\180\002\102\000\106\000\222\002\215\002\
\073\005\132\255\228\002\227\002\000\000\251\000\035\255\045\000\
\042\006\042\006\042\006\128\002\073\005\000\000\220\002\000\000\
\042\006\251\000\226\002\000\000\051\003\035\255\000\000\104\255\
\104\255\206\002\073\005\000\000\030\004\063\001\218\002\000\000\
\225\002\000\000\063\001\229\002\000\000\000\000\000\000\215\005\
\000\000\000\000\000\000\215\005\246\002\000\000\104\000\001\003\
\211\002\000\000\239\002\237\002\024\255\237\002\000\000\000\000\
\000\000\000\000\215\005\042\006\235\000\042\006\000\000\221\002\
\005\003\042\006\042\006\042\006\189\001\223\002\000\000\115\000\
\000\000\186\005\215\005\215\005\215\005\000\000\009\003\035\255\
\042\006\251\000\000\000\073\005\099\000\035\255\251\000\000\000\
\013\003\036\002\019\255\081\002\021\003\000\000\226\002\016\003\
\026\003\036\003\000\000\185\255\000\000\000\000\215\005\176\255\
\000\000\244\004\063\001\000\000\158\005\000\000\000\000\000\000\
\211\002\020\003\027\003\038\003\000\000\000\000\031\003\000\000\
\000\000\000\000\000\000\000\000\246\005\042\006\000\000\035\255\
\000\000\141\004\116\003\180\003\000\000\234\002\000\000\000\000\
\000\000\128\002\252\001\044\003\000\000\073\005\000\000\000\000\
\000\000\000\000\073\005\073\005\121\002\128\002\128\002\091\255\
\206\255\022\003\000\000\215\005\199\255\250\004\046\003\211\002\
\032\003\000\000\211\002\215\005\239\003\048\003\042\006\042\006\
\042\006\215\005\000\000\128\002\128\002\226\002\099\000\099\000\
\128\002\000\000\000\000\073\005\042\006\034\003\007\001\203\255\
\215\005\000\000\000\000\199\255\000\000\052\003\211\002\000\000\
\000\000\000\000\042\006\186\005\146\004\051\005\000\000\000\000\
\000\000\000\000\000\000\000\000\226\002\135\004\000\000\033\003\
\248\005\000\000\000\000\104\000\065\003\186\005\042\006\042\006\
\034\003\215\005\203\255\000\000\104\000\186\005\186\005\000\000\
\000\000\001\255\000\000\206\255\000\000\203\255\251\005\203\255\
\001\255\000\000"

let yyrindex = "\000\000\
\034\255\075\004\079\004\000\000\000\000\000\000\000\000\127\002\
\127\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\158\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\081\004\082\004\
\000\000\000\000\079\003\040\000\000\000\000\000\000\000\085\004\
\000\000\000\000\057\003\000\000\057\003\000\000\057\003\000\000\
\000\000\082\003\000\000\061\004\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\233\255\062\003\041\255\000\000\
\000\000\069\003\000\000\000\000\000\000\003\006\000\000\000\000\
\236\000\141\002\000\000\000\000\005\000\000\000\070\003\000\000\
\000\000\000\000\000\000\000\000\057\003\057\003\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\079\004\000\000\000\000\101\003\000\000\000\000\
\079\003\000\000\000\000\000\000\000\000\000\000\000\000\109\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\109\003\
\000\000\110\003\000\000\000\000\215\255\111\003\000\000\000\000\
\024\002\082\003\000\000\000\000\000\000\000\000\082\003\000\000\
\082\003\000\000\000\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\005\000\000\000\109\003\005\000\
\000\000\005\000\000\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\249\255\000\000\112\003\000\000\000\000\
\000\000\112\003\000\000\005\000\005\000\000\000\000\000\000\000\
\000\000\005\000\110\003\000\000\109\003\109\003\005\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\025\255\049\003\109\003\000\000\000\000\000\000\000\000\134\003\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\249\004\038\005\
\000\000\225\000\000\000\000\000\000\000\113\003\000\000\000\000\
\000\000\005\000\000\000\005\000\000\000\000\000\005\000\000\000\
\000\000\000\000\000\000\000\000\000\000\117\003\000\000\149\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\204\005\101\001\070\255\000\000\062\006\000\000\000\000\
\041\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\184\000\000\000\000\000\000\000\000\000\057\003\000\000\000\000\
\000\000\000\000\158\003\000\000\000\000\000\000\112\003\000\000\
\218\004\000\000\115\003\000\000\000\000\000\000\000\000\000\000\
\070\003\000\000\000\000\000\000\005\000\005\000\000\000\000\000\
\000\000\057\003\000\000\000\000\000\000\121\003\000\000\026\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
\000\000\000\000\000\000\000\000\083\003\000\000\000\000\121\003\
\134\003\000\000\000\000\125\003\114\003\000\000\000\000\000\000\
\092\003\173\000\173\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\110\255\000\000\004\000\057\003\000\000\000\000\005\000\
\000\000\000\000\000\000\000\000\000\000\000\000\149\005\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\160\005\005\000\
\000\000\005\000\000\000\005\000\000\000\005\000\000\000\015\000\
\021\000\059\000\000\000\000\000\000\000\000\000\070\006\112\003\
\000\000\000\000\090\000\000\000\090\000\005\000\000\000\000\000\
\005\000\005\000\005\000\000\000\000\000\000\000\126\003\000\000\
\000\000\083\003\121\003\000\000\000\000\000\000\000\000\000\000\
\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\105\000\127\003\000\000\000\000\125\003\000\000\047\001\
\000\000\000\000\121\003\173\000\000\000\000\000\000\000\000\000\
\121\003\125\003\168\003\000\000\000\000\000\000\000\000\127\002\
\127\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
\000\000\000\000\000\000\005\000\000\000\000\000\130\003\000\000\
\000\000\000\000\000\000\070\003\000\000\070\003\000\000\000\000\
\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\114\001\000\000\166\001\
\000\000\218\001\063\003\005\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\232\004\000\000\000\000\000\000\
\000\000\161\255\210\003\005\004\000\000\000\000\038\004\000\000\
\000\000\000\000\000\000\057\003\000\000\000\000\005\000\000\000\
\000\000\136\003\000\000\000\000\248\003\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\188\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\173\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\003\173\000\173\000\090\004\
\158\003\000\000\000\000\005\000\000\000\141\003\000\000\000\000\
\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\
\000\000\005\000\000\000\173\000\173\000\123\004\232\004\232\004\
\173\000\000\000\000\000\000\000\000\000\165\004\057\003\000\000\
\005\000\000\000\000\000\000\000\000\000\142\003\000\000\000\000\
\000\000\000\000\000\000\251\001\240\002\017\003\000\000\000\000\
\000\000\000\000\000\000\000\000\199\004\090\004\000\000\000\000\
\000\000\000\000\000\000\000\000\143\003\069\002\000\000\000\000\
\165\004\005\000\000\000\000\000\000\000\103\002\154\002\000\000\
\000\000\094\000\000\000\158\003\000\000\000\000\000\000\000\000\
\097\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\047\004\048\004\251\255\205\255\153\255\126\255\
\000\000\204\002\253\255\214\002\201\255\244\003\103\255\001\000\
\085\255\125\000\163\001\247\255\096\003\008\000\149\003\000\000\
\231\003\177\254\254\255\085\003\077\004\062\255\000\000\000\000\
\118\001\000\000\195\003\207\253\224\254\107\255\047\003\134\000\
\000\000\055\003\096\254\000\000\201\253\032\002\000\000\189\254\
\096\255\218\253\063\255\227\255\061\002\191\002\217\002\098\004\
\099\004"

let yytablesize = 1886
let yytable = "\048\000\
\034\000\126\000\069\000\129\000\038\000\077\000\054\000\050\001\
\000\001\196\001\079\000\231\000\183\001\072\000\148\001\076\000\
\095\001\093\000\088\001\090\000\096\000\097\000\204\001\080\000\
\246\000\112\002\080\001\087\000\048\001\116\000\075\002\098\001\
\025\001\049\000\068\001\115\002\049\001\030\001\040\000\074\000\
\168\001\182\000\183\000\086\000\088\000\118\000\125\000\235\000\
\127\000\220\000\122\000\117\000\118\000\088\000\058\001\021\001\
\049\000\083\001\057\000\104\000\038\000\058\000\170\001\171\001\
\130\002\131\002\139\002\059\000\119\000\086\000\060\000\135\002\
\102\000\156\002\102\000\250\000\102\000\129\001\102\000\172\001\
\172\000\102\000\248\001\171\000\138\000\069\001\070\001\061\000\
\089\000\184\001\062\000\170\000\063\000\064\000\049\000\249\001\
\236\000\089\000\102\000\075\001\158\002\102\000\108\002\225\000\
\105\000\038\000\152\002\229\001\229\000\230\000\231\000\232\000\
\233\000\234\000\208\001\162\000\209\001\065\000\178\001\241\000\
\102\000\094\001\251\000\174\000\113\000\174\000\139\000\021\002\
\166\001\109\002\102\000\066\000\190\001\025\002\005\001\190\001\
\007\001\069\000\162\000\010\001\011\001\012\001\013\001\014\001\
\069\000\142\001\009\001\175\000\076\001\175\000\118\000\023\001\
\118\000\075\000\082\001\019\001\252\000\061\000\022\001\027\001\
\024\001\050\000\026\001\029\001\096\001\139\000\163\000\164\001\
\055\000\141\000\075\000\094\001\195\000\028\001\191\001\149\000\
\159\000\014\002\051\001\052\001\181\001\182\001\201\000\094\001\
\059\001\150\000\200\001\061\000\192\001\071\001\123\000\113\001\
\112\001\057\000\142\000\130\000\058\000\151\000\152\000\061\000\
\047\002\160\000\059\000\042\000\084\002\133\000\043\000\116\000\
\056\000\081\002\149\000\115\001\087\001\131\000\153\000\044\000\
\116\001\095\000\045\000\095\000\150\000\095\000\061\000\095\000\
\078\000\062\000\095\000\063\000\064\000\117\000\118\000\035\001\
\151\000\152\000\135\001\148\002\095\000\106\001\046\000\108\001\
\105\001\091\000\107\001\095\000\155\002\110\001\095\000\121\001\
\226\000\153\000\232\001\036\001\065\000\105\002\122\001\123\001\
\047\000\165\000\095\000\095\000\245\001\091\000\156\001\084\000\
\087\002\161\000\066\000\116\000\106\000\253\001\254\001\008\001\
\000\002\001\002\002\002\095\000\231\000\165\000\015\001\164\000\
\094\001\211\000\136\001\137\001\138\001\166\000\094\001\038\000\
\161\000\117\000\118\000\022\002\187\000\097\001\203\001\019\002\
\020\002\071\000\074\000\164\000\074\000\074\000\074\000\075\000\
\074\000\166\000\119\000\151\001\152\001\006\002\188\000\118\002\
\116\000\210\001\120\002\082\000\018\002\074\000\107\000\075\000\
\075\000\050\002\165\001\167\000\074\000\082\000\175\001\149\000\
\068\002\246\001\038\000\028\002\038\000\092\000\117\000\118\000\
\074\000\074\000\074\000\074\000\074\000\094\000\141\002\167\000\
\170\001\171\001\053\002\205\001\168\001\151\000\152\000\119\000\
\058\002\059\002\060\002\159\000\074\000\095\000\157\000\213\001\
\009\002\172\001\094\001\200\000\010\002\200\000\212\001\067\002\
\074\000\212\000\170\001\171\001\042\002\127\000\127\000\070\002\
\218\001\043\002\159\000\168\001\098\000\157\000\221\001\168\001\
\223\001\013\002\225\001\172\001\227\001\066\002\099\000\057\000\
\168\001\075\000\058\000\072\002\075\000\023\002\035\000\036\000\
\059\000\170\001\171\001\060\000\239\001\170\001\171\001\240\001\
\241\001\242\001\075\000\032\002\093\002\075\000\170\001\171\001\
\017\002\099\002\172\001\100\000\061\000\216\000\172\001\255\001\
\199\001\063\000\064\000\197\001\026\002\106\002\107\002\007\002\
\195\000\195\000\101\000\103\000\195\000\094\002\195\000\195\000\
\195\000\195\000\148\000\108\000\148\000\195\000\195\000\195\000\
\148\000\195\000\065\000\128\002\129\002\124\002\125\002\126\002\
\132\002\195\000\195\000\219\001\034\002\109\000\054\000\195\000\
\066\000\037\002\084\001\134\002\069\002\149\000\055\001\113\000\
\056\001\215\000\057\001\085\001\195\000\195\000\039\002\150\000\
\114\000\142\002\040\002\078\000\086\001\078\000\078\000\078\000\
\082\002\078\000\125\001\151\000\152\000\054\002\195\000\139\000\
\151\000\052\002\115\000\155\000\151\000\150\002\151\002\195\000\
\195\000\120\000\219\000\149\000\153\000\078\000\084\001\255\000\
\168\001\062\002\063\002\064\002\004\001\150\000\006\001\186\001\
\121\000\078\000\078\000\078\000\123\000\128\000\102\002\123\000\
\086\001\151\000\152\000\103\002\104\002\132\000\170\001\171\001\
\195\001\086\002\179\001\137\000\211\000\083\002\211\000\140\000\
\211\000\211\000\153\000\211\000\211\000\211\000\211\000\172\001\
\143\000\078\000\211\000\211\000\211\000\211\000\211\000\211\000\
\100\001\204\000\147\000\204\000\133\002\144\000\211\000\211\000\
\243\000\145\000\146\000\136\002\211\000\148\000\018\001\057\000\
\020\001\116\000\058\000\154\000\217\000\211\000\211\000\157\000\
\059\000\211\000\211\000\133\000\156\000\158\000\117\000\118\000\
\161\000\165\000\114\002\166\000\167\000\168\000\211\000\117\000\
\118\000\169\000\121\002\211\000\061\000\178\000\179\000\119\000\
\127\002\063\000\064\000\177\000\211\000\211\000\223\000\107\000\
\119\000\107\000\137\002\107\000\180\000\107\000\127\001\138\002\
\107\000\049\002\184\000\051\002\212\000\212\000\212\000\181\000\
\212\000\212\000\065\000\212\000\212\000\212\000\212\000\149\000\
\185\000\107\000\212\000\212\000\212\000\212\000\212\000\186\000\
\066\000\150\000\189\000\190\000\191\000\154\002\212\000\212\000\
\153\002\203\000\240\000\227\000\212\000\151\000\152\000\242\000\
\159\002\221\000\161\002\139\000\244\000\212\000\247\000\138\000\
\254\000\212\000\212\000\101\001\253\000\001\001\153\000\002\001\
\216\000\216\000\216\000\003\001\216\000\216\000\212\000\216\000\
\216\000\216\000\216\000\212\000\116\000\016\001\216\000\216\000\
\216\000\216\000\216\000\218\000\212\000\212\000\163\000\017\001\
\031\001\061\002\216\000\216\000\192\000\193\000\046\001\053\001\
\216\000\047\001\117\000\118\000\054\001\074\001\072\001\194\000\
\077\001\195\000\168\001\196\000\078\001\216\000\216\000\079\001\
\197\000\080\001\089\001\119\000\215\000\215\000\215\000\198\000\
\215\000\215\000\216\000\215\000\215\000\215\000\215\000\216\000\
\170\001\171\001\215\000\215\000\215\000\215\000\215\000\222\000\
\216\000\216\000\090\001\091\001\092\001\093\001\215\000\215\000\
\099\001\172\001\102\001\199\000\215\000\219\000\219\000\219\000\
\100\002\219\000\219\000\118\000\219\000\219\000\219\000\219\000\
\103\001\215\000\215\000\219\000\219\000\219\000\219\000\219\000\
\220\000\168\001\001\000\002\000\003\000\004\000\005\000\219\000\
\219\000\104\001\110\000\215\000\110\000\219\000\110\000\109\001\
\110\000\111\001\119\001\110\000\215\000\215\000\120\001\170\001\
\171\001\124\001\219\000\219\000\126\001\110\000\128\001\042\000\
\152\000\155\000\043\000\130\001\110\000\131\001\133\001\110\000\
\172\001\140\001\057\000\078\000\219\000\144\001\045\000\141\001\
\146\001\143\001\145\001\110\000\110\000\219\000\219\000\217\000\
\217\000\217\000\147\001\217\000\217\000\149\001\217\000\217\000\
\217\000\217\000\046\000\150\001\110\000\217\000\217\000\217\000\
\217\000\217\000\157\001\057\000\076\002\153\001\154\001\155\001\
\158\001\217\000\217\000\162\001\047\000\163\001\168\001\217\000\
\167\001\223\000\223\000\223\000\173\001\223\000\223\000\174\001\
\223\000\223\000\223\000\223\000\217\000\217\000\177\001\223\000\
\223\000\223\000\223\000\223\000\170\001\171\001\179\001\063\000\
\193\001\194\001\063\000\223\000\223\000\171\000\217\000\201\001\
\197\001\223\000\202\001\063\000\206\001\172\001\063\000\217\000\
\217\000\211\001\056\000\056\000\216\001\056\000\223\000\223\000\
\214\001\215\001\222\001\226\001\221\000\221\000\221\000\217\001\
\221\000\221\000\063\000\221\000\221\000\221\000\221\000\188\000\
\223\000\056\000\221\000\221\000\221\000\221\000\221\000\224\001\
\220\001\223\000\223\000\228\001\063\000\230\001\221\000\221\000\
\231\001\233\001\056\000\235\001\221\000\237\001\218\000\218\000\
\218\000\243\001\218\000\218\000\244\001\218\000\218\000\218\000\
\218\000\221\000\221\000\247\001\218\000\218\000\218\000\218\000\
\251\001\183\000\252\001\037\001\038\001\185\001\039\001\168\001\
\218\000\218\000\004\002\221\000\040\001\003\002\218\000\041\001\
\005\002\008\002\011\002\012\002\221\000\221\000\015\002\016\002\
\024\002\094\001\031\002\218\000\218\000\170\001\171\001\035\002\
\042\001\036\002\222\000\222\000\222\000\038\002\222\000\222\000\
\041\002\222\000\222\000\222\000\222\000\218\000\172\001\048\002\
\222\000\222\000\222\000\222\000\181\000\046\002\218\000\218\000\
\175\000\057\002\056\002\171\001\222\000\222\000\250\001\065\002\
\168\001\074\002\222\000\220\000\220\000\220\000\078\002\220\000\
\220\000\077\002\220\000\220\000\220\000\220\000\079\002\222\000\
\222\000\220\000\220\000\220\000\220\000\194\000\170\001\171\001\
\080\002\088\002\091\002\089\002\090\002\220\000\220\000\098\002\
\101\002\222\000\113\002\220\000\117\002\119\002\070\002\172\001\
\123\002\027\002\222\000\222\000\140\002\146\002\057\000\057\000\
\220\000\220\000\057\000\057\000\057\000\057\000\057\000\057\000\
\116\000\149\002\038\000\057\000\057\000\057\000\233\000\057\000\
\234\000\237\000\220\000\084\000\242\000\054\000\115\000\057\000\
\057\000\197\000\090\000\220\000\220\000\057\000\117\000\118\000\
\057\000\088\000\129\000\057\000\057\000\057\000\057\000\057\000\
\057\000\082\000\057\000\057\000\057\000\057\000\057\000\119\000\
\057\000\067\000\153\000\113\000\141\000\069\000\051\000\139\000\
\057\000\057\000\198\000\121\000\057\000\228\000\057\000\096\002\
\057\000\208\000\226\000\206\000\038\000\057\000\057\000\200\000\
\147\000\168\001\171\000\057\000\057\000\171\000\119\000\171\000\
\171\000\171\000\171\000\117\000\145\000\143\000\171\000\171\000\
\171\000\223\000\171\000\224\000\030\002\057\000\155\000\170\001\
\171\001\155\000\171\000\171\000\199\000\029\002\057\000\057\000\
\171\000\176\001\155\000\188\000\188\000\155\000\060\001\073\001\
\172\001\188\000\188\000\188\000\188\000\171\000\171\000\139\001\
\188\000\188\000\188\000\207\001\188\000\228\000\114\001\097\002\
\162\002\155\000\145\002\238\001\188\000\188\000\196\000\171\000\
\234\001\168\001\188\000\221\000\222\000\073\002\055\002\000\000\
\171\000\171\000\000\000\155\000\245\000\183\000\183\000\188\000\
\188\000\183\000\000\000\183\000\183\000\000\000\183\000\170\001\
\171\001\000\000\183\000\183\000\183\000\000\000\183\000\199\000\
\000\000\188\000\117\000\118\000\000\000\000\000\183\000\183\000\
\172\001\000\000\188\000\188\000\183\000\122\002\000\000\000\000\
\075\000\000\000\111\000\119\000\111\000\000\000\111\000\000\000\
\111\000\183\000\183\000\111\000\168\001\000\000\000\000\000\000\
\181\000\181\000\000\000\000\000\181\000\000\000\181\000\181\000\
\000\000\181\000\000\000\183\000\111\000\181\000\181\000\181\000\
\000\000\181\000\170\001\171\001\183\000\183\000\000\000\000\000\
\000\000\181\000\181\000\000\000\033\002\079\000\000\000\181\000\
\000\000\194\000\194\000\172\001\000\000\000\000\000\000\194\000\
\194\000\194\000\194\000\149\000\181\000\181\000\194\000\194\000\
\194\000\000\000\194\000\000\000\000\000\150\000\000\000\000\000\
\000\000\000\000\194\000\194\000\000\000\095\000\181\000\000\000\
\194\000\151\000\152\000\000\000\000\000\000\000\000\000\181\000\
\181\000\000\000\095\000\000\000\000\000\194\000\194\000\000\000\
\000\000\095\000\153\000\000\000\095\000\197\000\197\000\000\000\
\000\000\197\000\000\000\197\000\197\000\000\000\197\000\194\000\
\095\000\095\000\197\000\197\000\197\000\000\000\197\000\000\000\
\194\000\194\000\000\000\000\000\000\000\000\000\197\000\197\000\
\000\000\095\000\000\000\000\000\197\000\000\000\198\000\198\000\
\000\000\000\000\000\000\000\000\198\000\198\000\198\000\198\000\
\000\000\197\000\197\000\198\000\198\000\198\000\000\000\198\000\
\000\000\000\000\108\002\000\000\000\000\000\000\000\000\198\000\
\198\000\000\000\000\000\197\000\168\001\198\000\000\000\000\000\
\000\000\095\002\168\001\000\000\197\000\197\000\143\002\168\001\
\199\000\199\000\198\000\198\000\199\000\000\000\199\000\199\000\
\199\000\199\000\170\001\171\001\000\000\199\000\199\000\199\000\
\170\001\171\001\000\000\000\000\198\000\170\001\171\001\000\000\
\000\000\199\000\199\000\172\001\000\000\198\000\198\000\199\000\
\000\000\172\001\196\000\196\000\000\000\000\000\172\001\000\000\
\196\000\196\000\196\000\196\000\199\000\199\000\000\000\196\000\
\196\000\196\000\000\000\196\000\132\000\000\000\132\000\000\000\
\132\000\000\000\132\000\196\000\196\000\132\000\199\000\000\000\
\000\000\196\000\000\000\199\000\199\000\000\000\000\000\199\000\
\199\000\199\000\199\000\199\000\199\000\000\000\196\000\196\000\
\199\000\199\000\199\000\075\000\085\002\075\000\075\000\075\000\
\000\000\075\000\116\002\000\000\199\000\199\000\149\000\000\000\
\196\000\149\000\199\000\000\000\000\000\162\000\000\000\149\000\
\150\000\196\000\196\000\150\000\000\000\075\000\000\000\199\000\
\199\000\150\000\000\000\000\000\151\000\152\000\000\000\151\000\
\152\000\075\000\075\000\075\000\075\000\151\000\152\000\000\000\
\079\000\199\000\079\000\079\000\079\000\153\000\079\000\000\000\
\153\000\000\000\199\000\199\000\000\000\075\000\153\000\204\000\
\000\000\000\000\000\000\094\001\000\000\205\000\206\000\207\000\
\208\000\075\000\079\000\000\000\209\000\210\000\211\000\144\002\
\168\001\000\000\000\000\000\000\204\000\000\000\079\000\079\000\
\079\000\212\000\205\000\206\000\207\000\208\000\213\000\000\000\
\000\000\209\000\210\000\211\000\000\000\116\000\170\001\171\001\
\000\000\000\000\079\000\214\000\215\000\116\000\212\000\000\000\
\000\000\000\000\000\000\213\000\164\000\000\000\079\000\172\001\
\032\001\033\001\034\001\117\000\118\000\216\000\000\000\000\000\
\214\000\215\000\116\000\117\000\118\000\000\000\217\000\218\000\
\204\000\134\001\000\000\000\000\119\000\000\000\205\000\206\000\
\207\000\081\001\216\000\000\000\119\000\209\000\210\000\211\000\
\117\000\118\000\000\000\217\000\218\000\000\000\000\000\094\000\
\000\000\094\000\212\000\094\000\000\000\094\000\000\000\213\000\
\094\000\119\000\106\000\000\000\106\000\000\000\106\000\000\000\
\106\000\000\000\094\000\106\000\214\000\215\000\000\000\149\000\
\000\000\094\000\000\000\149\000\094\000\106\000\132\001\000\000\
\000\000\150\000\000\000\000\000\106\000\150\000\216\000\106\000\
\094\000\094\000\149\000\000\000\000\000\151\000\152\000\217\000\
\218\000\151\000\152\000\106\000\106\000\000\000\098\000\168\001\
\098\000\094\000\098\000\000\000\098\000\000\000\153\000\098\000\
\151\000\152\000\153\000\168\001\106\000\000\000\000\000\000\000\
\000\000\000\000\169\001\000\000\000\000\170\001\171\001\000\000\
\098\000\153\000\000\000\098\000\000\000\007\000\008\000\009\000\
\010\000\170\001\171\001\000\000\011\000\012\000\172\001\098\000\
\013\000\014\000\015\000\016\000\017\000\000\000\018\000\000\000\
\000\000\000\000\172\001\000\000\000\000\019\000\000\000\000\000\
\098\000\020\000\021\000\168\001\000\000\147\002\022\000\023\000\
\160\002\024\000\092\002\000\000\025\000\026\000\027\000\028\000\
\074\000\000\000\029\000\000\000\000\000\030\000\000\000\074\000\
\031\000\170\001\171\001\117\000\118\000\000\000\117\000\118\000\
\000\000\000\000\061\001\000\000\000\000\062\001\074\000\074\000\
\000\000\000\000\172\001\063\001\119\000\000\000\064\001\119\000\
\000\000\000\000\000\000\000\000\065\001\000\000\000\000\074\000\
\101\000\000\000\101\000\000\000\101\000\000\000\101\000\066\001\
\135\000\101\000\135\000\000\000\135\000\067\001\135\000\000\000\
\000\000\135\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\101\000\000\000\000\000\101\000"

let yycheck = "\005\000\
\002\000\053\000\012\000\055\000\000\000\015\000\009\000\179\000\
\139\000\089\001\016\000\000\000\080\001\013\000\047\001\015\000\
\000\000\021\000\212\000\019\000\024\000\025\000\000\000\016\000\
\128\000\081\002\004\001\013\001\178\000\022\001\012\001\226\000\
\163\000\009\001\188\000\085\002\013\001\168\000\013\001\000\000\
\022\001\093\000\094\000\003\001\030\001\045\001\052\000\013\001\
\054\000\105\000\050\000\044\001\045\001\030\001\185\000\159\000\
\013\001\211\000\001\001\027\001\027\001\004\001\044\001\045\001\
\103\002\104\002\116\002\010\001\061\001\029\001\013\001\110\002\
\003\001\073\001\005\001\131\000\007\001\016\001\009\001\061\001\
\086\000\012\001\162\001\085\000\004\001\189\000\190\000\030\001\
\074\001\067\001\033\001\084\000\035\001\036\001\070\001\163\001\
\062\001\074\001\029\001\203\000\156\002\032\001\012\001\109\000\
\072\001\072\001\145\002\140\001\114\000\115\000\116\000\117\000\
\118\000\119\000\009\001\006\001\009\001\060\001\005\001\123\000\
\069\001\008\001\132\000\004\001\004\001\004\001\046\001\195\001\
\066\001\039\001\061\001\074\001\004\001\201\001\144\000\004\001\
\146\000\147\000\029\001\149\000\150\000\151\000\152\000\153\000\
\154\000\039\001\148\000\028\001\204\000\028\001\045\001\161\000\
\045\001\044\001\210\000\157\000\003\001\009\001\160\000\165\000\
\162\000\058\001\164\000\167\000\220\000\046\001\046\001\065\001\
\013\001\035\001\061\001\008\001\000\000\166\000\046\001\022\001\
\004\001\046\001\180\000\181\000\078\001\079\001\022\001\008\001\
\186\000\032\001\091\001\039\001\086\001\191\000\006\001\003\001\
\029\001\001\001\060\001\004\001\004\001\044\001\045\001\039\001\
\233\001\029\001\010\001\001\001\029\001\013\001\004\001\022\001\
\013\001\025\001\022\001\013\001\212\000\022\001\061\001\013\001\
\018\001\003\001\016\001\005\001\032\001\007\001\030\001\009\001\
\000\000\033\001\012\001\035\001\036\001\044\001\045\001\009\001\
\044\001\045\001\030\001\140\002\022\001\243\000\036\001\245\000\
\242\000\009\001\244\000\029\001\149\002\247\000\032\001\001\001\
\003\001\061\001\144\001\029\001\060\001\077\002\002\001\003\001\
\054\001\009\001\044\001\045\001\158\001\029\001\058\001\058\001\
\041\002\006\001\074\001\022\001\041\001\167\001\168\001\147\000\
\170\001\171\001\172\001\061\001\009\001\029\001\154\000\009\001\
\008\001\000\000\032\001\033\001\034\001\009\001\008\001\027\001\
\029\001\044\001\045\001\196\001\004\001\003\001\094\001\193\001\
\194\001\013\001\003\001\029\001\005\001\006\001\007\001\044\001\
\009\001\029\001\061\001\053\001\054\001\007\001\022\001\088\002\
\022\001\109\001\091\002\013\001\191\001\022\001\009\001\013\001\
\061\001\237\001\066\001\009\001\029\001\013\001\072\001\022\001\
\010\002\003\001\070\001\206\001\072\001\013\001\044\001\045\001\
\041\001\042\001\043\001\044\001\045\001\013\001\119\002\029\001\
\044\001\045\001\244\001\097\001\022\001\044\001\045\001\061\001\
\250\001\251\001\252\001\006\001\061\001\013\001\006\001\113\001\
\003\001\061\001\008\001\003\001\003\001\005\001\112\001\009\002\
\073\001\000\000\044\001\045\001\013\001\028\001\029\001\021\001\
\120\001\018\001\029\001\022\001\013\001\029\001\128\001\022\001\
\130\001\185\001\132\001\061\001\134\001\008\002\013\001\001\001\
\022\001\044\001\004\001\014\002\044\001\197\001\013\001\014\001\
\010\001\044\001\045\001\013\001\150\001\044\001\045\001\153\001\
\154\001\155\001\061\001\211\001\054\002\061\001\044\001\045\001\
\190\001\066\002\061\001\013\001\030\001\000\000\061\001\169\001\
\006\001\035\001\036\001\009\001\202\001\078\002\079\002\179\001\
\004\001\005\001\013\001\013\001\008\001\056\002\010\001\011\001\
\012\001\013\001\003\001\055\001\005\001\017\001\018\001\019\001\
\009\001\021\001\060\001\100\002\101\002\095\002\096\002\097\002\
\105\002\029\001\030\001\012\001\214\001\006\001\209\001\035\001\
\074\001\219\001\004\001\109\002\012\002\022\001\013\001\004\001\
\015\001\000\000\017\001\013\001\048\001\049\001\224\001\032\001\
\004\001\123\002\228\001\003\001\022\001\005\001\006\001\007\001\
\028\002\009\001\005\001\044\001\045\001\003\001\066\001\046\001\
\005\001\243\001\004\001\050\001\009\001\143\002\144\002\075\001\
\076\001\004\001\000\000\022\001\061\001\029\001\004\001\138\000\
\022\001\003\002\004\002\005\002\143\000\032\001\145\000\013\001\
\013\001\041\001\042\001\043\001\006\001\004\001\070\002\006\001\
\022\001\044\001\045\001\075\002\076\002\006\001\044\001\045\001\
\004\001\035\002\006\001\013\001\003\001\031\002\005\001\013\001\
\007\001\008\001\061\001\010\001\011\001\012\001\013\001\061\001\
\004\001\073\001\017\001\018\001\019\001\020\001\021\001\022\001\
\005\001\003\001\009\001\005\001\108\002\004\001\029\001\030\001\
\022\001\004\001\004\001\111\002\035\001\029\001\156\000\001\001\
\158\000\022\001\004\001\009\001\000\000\044\001\045\001\029\001\
\010\001\048\001\049\001\013\001\009\001\003\001\044\001\045\001\
\009\001\009\001\084\002\003\001\003\001\046\001\061\001\044\001\
\045\001\013\001\092\002\066\001\030\001\004\001\009\001\061\001\
\098\002\035\001\036\001\013\001\075\001\076\001\000\000\003\001\
\061\001\005\001\112\002\007\001\029\001\009\001\005\001\113\002\
\012\001\236\001\022\001\238\001\003\001\004\001\005\001\029\001\
\007\001\008\001\060\001\010\001\011\001\012\001\013\001\022\001\
\046\001\029\001\017\001\018\001\019\001\020\001\021\001\029\001\
\074\001\032\001\004\001\004\001\029\001\147\002\029\001\030\001\
\146\002\004\001\009\001\005\001\035\001\044\001\045\001\029\001\
\158\002\000\000\160\002\046\001\029\001\044\001\029\001\004\001\
\006\001\048\001\049\001\005\001\005\001\022\001\061\001\046\001\
\003\001\004\001\005\001\046\001\007\001\008\001\061\001\010\001\
\011\001\012\001\013\001\066\001\022\001\004\001\017\001\018\001\
\019\001\020\001\021\001\000\000\075\001\076\001\046\001\013\001\
\009\001\005\001\029\001\030\001\002\001\003\001\017\001\029\001\
\035\001\022\001\044\001\045\001\029\001\009\001\070\001\013\001\
\013\001\015\001\022\001\017\001\004\001\048\001\049\001\004\001\
\022\001\004\001\013\001\061\001\003\001\004\001\005\001\029\001\
\007\001\008\001\061\001\010\001\011\001\012\001\013\001\066\001\
\044\001\045\001\017\001\018\001\019\001\020\001\021\001\000\000\
\075\001\076\001\017\001\017\001\013\001\013\001\029\001\030\001\
\005\001\061\001\005\001\057\001\035\001\003\001\004\001\005\001\
\005\001\007\001\008\001\045\001\010\001\011\001\012\001\013\001\
\003\001\048\001\049\001\017\001\018\001\019\001\020\001\021\001\
\000\000\022\001\001\000\002\000\003\000\004\000\005\000\029\001\
\030\001\007\001\003\001\066\001\005\001\035\001\007\001\005\001\
\009\001\005\001\005\001\012\001\075\001\076\001\003\001\044\001\
\045\001\005\001\048\001\049\001\005\001\022\001\029\001\001\001\
\045\001\050\001\004\001\029\001\029\001\005\001\053\001\032\001\
\061\001\006\001\000\000\013\001\066\001\004\001\016\001\013\001\
\003\001\013\001\013\001\044\001\045\001\075\001\076\001\003\001\
\004\001\005\001\005\001\007\001\008\001\005\001\010\001\011\001\
\012\001\013\001\036\001\029\001\061\001\017\001\018\001\019\001\
\020\001\021\001\005\001\000\000\012\001\029\001\029\001\029\001\
\006\001\029\001\030\001\013\001\054\001\004\001\022\001\035\001\
\004\001\003\001\004\001\005\001\005\001\007\001\008\001\005\001\
\010\001\011\001\012\001\013\001\048\001\049\001\005\001\017\001\
\018\001\019\001\020\001\021\001\044\001\045\001\006\001\001\001\
\039\001\022\001\004\001\029\001\030\001\000\000\066\001\004\001\
\009\001\035\001\004\001\013\001\046\001\061\001\016\001\075\001\
\076\001\022\001\006\001\007\001\007\001\009\001\048\001\049\001\
\022\001\017\001\005\001\054\001\003\001\004\001\005\001\048\001\
\007\001\008\001\036\001\010\001\011\001\012\001\013\001\000\000\
\066\001\029\001\017\001\018\001\019\001\020\001\021\001\029\001\
\048\001\075\001\076\001\029\001\054\001\005\001\029\001\030\001\
\006\001\022\001\046\001\048\001\035\001\012\001\003\001\004\001\
\005\001\029\001\007\001\008\001\022\001\010\001\011\001\012\001\
\013\001\048\001\049\001\005\001\017\001\018\001\019\001\020\001\
\039\001\000\000\022\001\001\001\002\001\020\001\004\001\022\001\
\029\001\030\001\029\001\066\001\010\001\069\001\035\001\013\001\
\029\001\046\001\005\001\013\001\075\001\076\001\003\001\005\001\
\013\001\008\001\029\001\048\001\049\001\044\001\045\001\022\001\
\030\001\017\001\003\001\004\001\005\001\017\001\007\001\008\001\
\003\001\010\001\011\001\012\001\013\001\066\001\061\001\017\001\
\017\001\018\001\019\001\020\001\000\000\005\001\075\001\076\001\
\028\001\005\001\046\001\045\001\029\001\030\001\020\001\007\001\
\022\001\005\001\035\001\003\001\004\001\005\001\007\001\007\001\
\008\001\005\001\010\001\011\001\012\001\013\001\005\001\048\001\
\049\001\017\001\018\001\019\001\020\001\000\000\044\001\045\001\
\005\001\022\001\012\001\017\001\007\001\029\001\030\001\070\001\
\005\001\066\001\029\001\035\001\007\001\022\001\021\001\061\001\
\009\001\007\001\075\001\076\001\009\001\029\001\004\001\005\001\
\048\001\049\001\008\001\009\001\010\001\011\001\012\001\013\001\
\022\001\009\001\000\000\017\001\018\001\019\001\000\000\021\001\
\000\000\000\000\066\001\005\001\000\000\029\001\005\001\029\001\
\030\001\000\000\029\001\075\001\076\001\035\001\044\001\045\001\
\005\001\029\001\029\001\008\001\009\001\010\001\011\001\012\001\
\013\001\005\001\048\001\049\001\017\001\018\001\019\001\061\001\
\021\001\005\001\005\001\005\001\005\001\005\001\070\001\005\001\
\029\001\030\001\000\000\007\001\066\001\005\001\035\001\012\001\
\046\001\005\001\005\001\005\001\070\001\075\001\076\001\022\001\
\007\001\022\001\005\001\048\001\049\001\008\001\007\001\010\001\
\011\001\012\001\013\001\007\001\007\001\007\001\017\001\018\001\
\019\001\107\000\021\001\108\000\209\001\066\001\001\001\044\001\
\045\001\004\001\029\001\030\001\000\000\208\001\075\001\076\001\
\035\001\074\001\013\001\004\001\005\001\016\001\187\000\201\000\
\061\001\010\001\011\001\012\001\013\001\048\001\049\001\035\001\
\017\001\018\001\019\001\103\001\021\001\113\000\252\000\012\001\
\161\002\036\001\134\002\149\001\029\001\030\001\000\000\066\001\
\146\001\022\001\035\001\106\000\106\000\015\002\246\001\255\255\
\075\001\076\001\255\255\054\001\022\001\004\001\005\001\048\001\
\049\001\008\001\255\255\010\001\011\001\255\255\013\001\044\001\
\045\001\255\255\017\001\018\001\019\001\255\255\021\001\000\000\
\255\255\066\001\044\001\045\001\255\255\255\255\029\001\030\001\
\061\001\255\255\075\001\076\001\035\001\007\001\255\255\255\255\
\000\000\255\255\003\001\061\001\005\001\255\255\007\001\255\255\
\009\001\048\001\049\001\012\001\022\001\255\255\255\255\255\255\
\004\001\005\001\255\255\255\255\008\001\255\255\010\001\011\001\
\255\255\013\001\255\255\066\001\029\001\017\001\018\001\019\001\
\255\255\021\001\044\001\045\001\075\001\076\001\255\255\255\255\
\255\255\029\001\030\001\255\255\007\001\000\000\255\255\035\001\
\255\255\004\001\005\001\061\001\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\022\001\048\001\049\001\017\001\018\001\
\019\001\255\255\021\001\255\255\255\255\032\001\255\255\255\255\
\255\255\255\255\029\001\030\001\255\255\009\001\066\001\255\255\
\035\001\044\001\045\001\255\255\255\255\255\255\255\255\075\001\
\076\001\255\255\022\001\255\255\255\255\048\001\049\001\255\255\
\255\255\029\001\061\001\255\255\032\001\004\001\005\001\255\255\
\255\255\008\001\255\255\010\001\011\001\255\255\013\001\066\001\
\044\001\045\001\017\001\018\001\019\001\255\255\021\001\255\255\
\075\001\076\001\255\255\255\255\255\255\255\255\029\001\030\001\
\255\255\061\001\255\255\255\255\035\001\255\255\004\001\005\001\
\255\255\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\048\001\049\001\017\001\018\001\019\001\255\255\021\001\
\255\255\255\255\012\001\255\255\255\255\255\255\255\255\029\001\
\030\001\255\255\255\255\066\001\022\001\035\001\255\255\255\255\
\255\255\021\001\022\001\255\255\075\001\076\001\021\001\022\001\
\004\001\005\001\048\001\049\001\008\001\255\255\010\001\011\001\
\012\001\013\001\044\001\045\001\255\255\017\001\018\001\019\001\
\044\001\045\001\255\255\255\255\066\001\044\001\045\001\255\255\
\255\255\029\001\030\001\061\001\255\255\075\001\076\001\035\001\
\255\255\061\001\004\001\005\001\255\255\255\255\061\001\255\255\
\010\001\011\001\012\001\013\001\048\001\049\001\255\255\017\001\
\018\001\019\001\255\255\021\001\003\001\255\255\005\001\255\255\
\007\001\255\255\009\001\029\001\030\001\012\001\066\001\255\255\
\255\255\035\001\255\255\004\001\005\001\255\255\255\255\075\001\
\076\001\010\001\011\001\012\001\013\001\255\255\048\001\049\001\
\017\001\018\001\019\001\003\001\009\001\005\001\006\001\007\001\
\255\255\009\001\009\001\255\255\029\001\030\001\022\001\255\255\
\066\001\022\001\035\001\255\255\255\255\029\001\255\255\022\001\
\032\001\075\001\076\001\032\001\255\255\029\001\255\255\048\001\
\049\001\032\001\255\255\255\255\044\001\045\001\255\255\044\001\
\045\001\041\001\042\001\043\001\044\001\044\001\045\001\255\255\
\003\001\066\001\005\001\006\001\007\001\061\001\009\001\255\255\
\061\001\255\255\075\001\076\001\255\255\061\001\061\001\004\001\
\255\255\255\255\255\255\008\001\255\255\010\001\011\001\012\001\
\013\001\073\001\029\001\255\255\017\001\018\001\019\001\021\001\
\022\001\255\255\255\255\255\255\004\001\255\255\041\001\042\001\
\043\001\030\001\010\001\011\001\012\001\013\001\035\001\255\255\
\255\255\017\001\018\001\019\001\255\255\022\001\044\001\045\001\
\255\255\255\255\061\001\048\001\049\001\022\001\030\001\255\255\
\255\255\255\255\255\255\035\001\029\001\255\255\073\001\061\001\
\041\001\042\001\043\001\044\001\045\001\066\001\255\255\255\255\
\048\001\049\001\022\001\044\001\045\001\255\255\075\001\076\001\
\004\001\029\001\255\255\255\255\061\001\255\255\010\001\011\001\
\012\001\013\001\066\001\255\255\061\001\017\001\018\001\019\001\
\044\001\045\001\255\255\075\001\076\001\255\255\255\255\003\001\
\255\255\005\001\030\001\007\001\255\255\009\001\255\255\035\001\
\012\001\061\001\003\001\255\255\005\001\255\255\007\001\255\255\
\009\001\255\255\022\001\012\001\048\001\049\001\255\255\022\001\
\255\255\029\001\255\255\022\001\032\001\022\001\029\001\255\255\
\255\255\032\001\255\255\255\255\029\001\032\001\066\001\032\001\
\044\001\045\001\022\001\255\255\255\255\044\001\045\001\075\001\
\076\001\044\001\045\001\044\001\045\001\255\255\003\001\022\001\
\005\001\061\001\007\001\255\255\009\001\255\255\061\001\012\001\
\044\001\045\001\061\001\022\001\061\001\255\255\255\255\255\255\
\255\255\255\255\029\001\255\255\255\255\044\001\045\001\255\255\
\029\001\061\001\255\255\032\001\255\255\023\001\024\001\025\001\
\026\001\044\001\045\001\255\255\030\001\031\001\061\001\044\001\
\034\001\035\001\036\001\037\001\038\001\255\255\040\001\255\255\
\255\255\255\255\061\001\255\255\255\255\047\001\255\255\255\255\
\061\001\051\001\052\001\022\001\255\255\022\001\056\001\057\001\
\022\001\059\001\029\001\255\255\062\001\063\001\064\001\065\001\
\022\001\255\255\068\001\255\255\255\255\071\001\255\255\029\001\
\074\001\044\001\045\001\044\001\045\001\255\255\044\001\045\001\
\255\255\255\255\001\001\255\255\255\255\004\001\044\001\045\001\
\255\255\255\255\061\001\010\001\061\001\255\255\013\001\061\001\
\255\255\255\255\255\255\255\255\019\001\255\255\255\255\061\001\
\003\001\255\255\005\001\255\255\007\001\255\255\009\001\030\001\
\003\001\012\001\005\001\255\255\007\001\036\001\009\001\255\255\
\255\255\012\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\029\001\255\255\255\255\032\001"

let yynames_const = "\
  CHOICE\000\
  STAR\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  NEW\000\
  OUT\000\
  IN\000\
  REPL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  FUN\000\
  EQUATION\000\
  REDUCTION\000\
  PREDICATE\000\
  PROCESS\000\
  SLASH\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  BEFORE\000\
  PUTBEGIN\000\
  NONINTERF\000\
  EVENT\000\
  NOT\000\
  ELIMTRUE\000\
  FREE\000\
  SUCHTHAT\000\
  CLAUSES\000\
  RED\000\
  EQUIV\000\
  EQUIVEQ\000\
  WEDGE\000\
  DIFF\000\
  COLON\000\
  NOUNIF\000\
  PHASE\000\
  BARRIER\000\
  AMONG\000\
  WEAKSECRET\000\
  PARAM\000\
  ORTEXT\000\
  FAIL\000\
  GREATER\000\
  TYPE\000\
  SET\000\
  FORALL\000\
  CONST\000\
  INJEVENT\000\
  OR\000\
  CHANNEL\000\
  LETFUN\000\
  DEFINE\000\
  EXPAND\000\
  YIELD\000\
  LEQ\000\
  PROBA\000\
  LBRACE\000\
  RBRACE\000\
  PROOF\000\
  EQUIVALENCE\000\
  OTHERWISE\000\
  TABLE\000\
  INSERT\000\
  GET\000\
  "

let yynames_block = "\
  IDENT\000\
  ATIDENT\000\
  STRING\000\
  PROJECTION\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 150 "pitparser.mly"
        ( (* Options are ignored, they are supported for compatibility with
             CryptoVerif only *)
          TTypeDecl(_2) :: _5 )
# 1120 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 154 "pitparser.mly"
 ( (TFunDecl(_2, _4, _7, _8)) :: _10 )
# 1131 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : 'typeid) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'treducmayfail) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _12 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 157 "pitparser.mly"
 ( (TReducFail(_2,_4,_7,_9, _10)) :: _12 )
# 1143 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'treduc) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 160 "pitparser.mly"
 ( (TReduc(_2,_3)) :: _5 )
# 1152 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 163 "pitparser.mly"
        ( (List.map (fun x -> TConstDecl(x, _4, _5)) _2) @ _7 )
# 1162 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'eqlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 165 "pitparser.mly"
 ( (TEquation(_2, _3)) :: _5 )
# 1171 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 167 "pitparser.mly"
        ( (TEventDecl(_2, [])) :: _4 )
# 1179 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 169 "pitparser.mly"
        ( (TEventDecl(_2, _4)) :: _7 )
# 1188 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'typeidseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 171 "pitparser.mly"
        ( (TPredDecl(_2, _4, _6)) :: _8 )
# 1198 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 173 "pitparser.mly"
        ( (TPredDecl(_2, [], _3)) :: _5 )
# 1207 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 175 "pitparser.mly"
        ( (TTableDecl(_2, _4)) :: _7 )
# 1216 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 177 "pitparser.mly"
 ( (TPDef(_2,[],_4)) :: _6 )
# 1225 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'mayfailvartypeseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 179 "pitparser.mly"
        ( (TPDef(_2,_4,_7)) :: _9 )
# 1235 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 181 "pitparser.mly"
        ( (TLetFun(_2,[],_4)) :: _6 )
# 1244 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'mayfailvartypeseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 183 "pitparser.mly"
        ( (TLetFun(_2,_4,_7)) :: _9 )
# 1254 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 185 "pitparser.mly"
        ( (TSet(_2,S _4)) :: _6 )
# 1263 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 187 "pitparser.mly"
        ( (TSet(_2,S _4)) :: _6 )
# 1272 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 189 "pitparser.mly"
        ( (TSet(_2,I _4)) :: _6 )
# 1281 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 191 "pitparser.mly"
        ( (TNoUnif (_2, _4)) :: _6 )
# 1290 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tfnebindingseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 193 "pitparser.mly"
        ( (TNoUnif ([], _2)) :: _4 )
# 1298 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 195 "pitparser.mly"
        ( (TQuery(_2,_4)) :: _6 )
# 1307 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tqueryseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 197 "pitparser.mly"
        ( (TQuery([],_2)) :: _4 )
# 1315 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 199 "pitparser.mly"
        ( (TNoninterf(_2, _4)) :: _6 )
# 1324 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 201 "pitparser.mly"
        ( (TNoninterf([], _2)) :: _4 )
# 1332 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 203 "pitparser.mly"
        ( (TWeaksecret(_2)) :: _4 )
# 1340 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 205 "pitparser.mly"
 ( (TNot(_2, _4)) :: _6 )
# 1349 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 207 "pitparser.mly"
 ( (TNot([], _2)) :: _4 )
# 1357 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'neidentseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 209 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1367 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 212 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _4 )
# 1376 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'proof) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 215 "pitparser.mly"
        ( (* Supported for compatility with CryptoVerif only *)
          _5 )
# 1385 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nemayfailvartypeseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 218 "pitparser.mly"
        ( (TElimtrue (_2,_4)) :: _6 )
# 1394 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 220 "pitparser.mly"
        ( (TElimtrue ([],_2)) :: _4 )
# 1402 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 222 "pitparser.mly"
        ( (* For compatibility with CryptoVerif, allow 
               channel c1...cn. 
             as a synonym for 
               free c1...cn:channel. *)
          (List.map (fun x -> TFree(x, ("channel", dummy_ext), [])) _2) @ _4 )
# 1414 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'options) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 228 "pitparser.mly"
        ( (List.map (fun x -> TFree(x, _4, _5)) _2) @ _7 )
# 1424 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 230 "pitparser.mly"
        ( (TClauses(_2)) :: _3 )
# 1432 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.tdecl list) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 232 "pitparser.mly"
        ( (TDefine(_2, _4, _7)) :: _9 )
# 1442 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'typeidseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.tdecl list) in
    Obj.repr(
# 234 "pitparser.mly"
        ( (TExpand(_2, _4)) :: _7 )
# 1451 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    Obj.repr(
# 236 "pitparser.mly"
        ( [] )
# 1457 "pitparser.ml"
               : Pitptree.tdecl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 240 "pitparser.mly"
 ( _1, _3, None )
# 1465 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.tdecl list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 242 "pitparser.mly"
 ( 
	  Param.equivalence := true;
	  _1, _3, Some _4 )
# 1476 "pitparser.ml"
               : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 250 "pitparser.mly"
        ( _1 )
# 1483 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 252 "pitparser.mly"
        ( _1 )
# 1490 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 254 "pitparser.mly"
        ( string_of_int _1, parse_extent() )
# 1497 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 256 "pitparser.mly"
        ( "*", parse_extent() )
# 1503 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 258 "pitparser.mly"
        ( ".", parse_extent() )
# 1509 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 260 "pitparser.mly"
        ( "set", parse_extent() )
# 1515 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 262 "pitparser.mly"
        ( "=", parse_extent() )
# 1521 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    Obj.repr(
# 264 "pitparser.mly"
        ( ",", parse_extent() )
# 1527 "pitparser.ml"
               : 'prooftoken))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'prooftoken) in
    Obj.repr(
# 268 "pitparser.mly"
        ( [_1] )
# 1534 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'prooftoken) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 270 "pitparser.mly"
        ( _1 :: _2 )
# 1542 "pitparser.ml"
               : 'proofcommand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'proofcommand) in
    Obj.repr(
# 274 "pitparser.mly"
 ( [_1] )
# 1549 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'proofcommand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'proof) in
    Obj.repr(
# 276 "pitparser.mly"
        ( _1 :: _3 )
# 1557 "pitparser.ml"
               : 'proof))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 282 "pitparser.mly"
        ( _2 )
# 1564 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    Obj.repr(
# 284 "pitparser.mly"
        ( [] )
# 1570 "pitparser.ml"
               : 'options))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 288 "pitparser.mly"
    ( _1 :: _3 )
# 1578 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 290 "pitparser.mly"
    ( [_1] )
# 1585 "pitparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 294 "pitparser.mly"
    ( None )
# 1591 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    Obj.repr(
# 296 "pitparser.mly"
    ( Some [] )
# 1597 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'neidentseq) in
    Obj.repr(
# 298 "pitparser.mly"
    ( Some (_2) )
# 1604 "pitparser.ml"
               : 'newarg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nevartype) in
    Obj.repr(
# 302 "pitparser.mly"
        ( (_1,_3)::_5 )
# 1613 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 305 "pitparser.mly"
        ( [(_1,_3)] )
# 1621 "pitparser.ml"
               : 'nevartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nevartype) in
    Obj.repr(
# 309 "pitparser.mly"
        ( _2 )
# 1628 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 311 "pitparser.mly"
        ( [] )
# 1634 "pitparser.ml"
               : 'forallvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 315 "pitparser.mly"
        ( _1 )
# 1641 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    Obj.repr(
# 317 "pitparser.mly"
        ( (* channel is allowed as a type, even though it is also a keyword for the declaration channel c1...cn. *)
          "channel", parse_extent() )
# 1648 "pitparser.ml"
               : 'typeid))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 322 "pitparser.mly"
        ( _1 )
# 1655 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 324 "pitparser.mly"
        ( [] )
# 1661 "pitparser.ml"
               : 'typeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netypeidseq) in
    Obj.repr(
# 328 "pitparser.mly"
    ( _1 :: _3 )
# 1669 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 330 "pitparser.mly"
    ( [_1] )
# 1676 "pitparser.ml"
               : 'netypeidseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 336 "pitparser.mly"
 ( PFail, parse_extent () )
# 1682 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 338 "pitparser.mly"
        ( PFunApp (_1, _3), parse_extent() )
# 1690 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    Obj.repr(
# 340 "pitparser.mly"
        ( PProj (_1,_3), parse_extent() )
# 1698 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    Obj.repr(
# 342 "pitparser.mly"
        ( Param.has_choice := true; 
	  PFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 1707 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 345 "pitparser.mly"
 ( PIdent (_1), parse_extent() )
# 1714 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 347 "pitparser.mly"
        ( PFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1722 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 349 "pitparser.mly"
        ( PFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1730 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    Obj.repr(
# 351 "pitparser.mly"
        ( PFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1737 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 353 "pitparser.mly"
        ( PFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1745 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 355 "pitparser.mly"
        ( PFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1753 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 357 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PTuple (l), parse_extent() )
# 1763 "pitparser.ml"
               : Pitptree.term_e))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 364 "pitparser.mly"
 ( _1 :: _3 )
# 1771 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 366 "pitparser.mly"
 ( [_1] )
# 1778 "pitparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 370 "pitparser.mly"
        ( _1 )
# 1785 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 372 "pitparser.mly"
        ( [] )
# 1791 "pitparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'netermseq) in
    Obj.repr(
# 378 "pitparser.mly"
    ( (_1, Some _4) )
# 1799 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 380 "pitparser.mly"
    ( (_1, None) )
# 1806 "pitparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ni) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 384 "pitparser.mly"
    ( _1 :: _3 )
# 1814 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ni) in
    Obj.repr(
# 386 "pitparser.mly"
    ( [_1] )
# 1821 "pitparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tquery) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tqueryseq) in
    Obj.repr(
# 392 "pitparser.mly"
    ( _1 :: _3 )
# 1829 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tquery) in
    Obj.repr(
# 394 "pitparser.mly"
    ( [_1] )
# 1836 "pitparser.ml"
               : 'tqueryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 398 "pitparser.mly"
    ( PRealQuery(_1) )
# 1843 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 400 "pitparser.mly"
    ( PPutBegin(false, _4) )
# 1850 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 402 "pitparser.mly"
    ( PPutBegin(true, _4) )
# 1857 "pitparser.ml"
               : 'tquery))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 406 "pitparser.mly"
 ( PGFunApp (_1, _3), parse_extent() )
# 1865 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 408 "pitparser.mly"
 ( PGIdent (_1), parse_extent() )
# 1872 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gtermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 410 "pitparser.mly"
        ( PGPhase(_1, _3, _6), parse_extent() )
# 1881 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 412 "pitparser.mly"
        ( PGPhase(("table", parse_extent()), [_3], _6), parse_extent() )
# 1889 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 414 "pitparser.mly"
        ( PGFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 1897 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 416 "pitparser.mly"
        ( PGFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 1905 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 418 "pitparser.mly"
        ( PGFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 1912 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 420 "pitparser.mly"
        ( PGFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 1920 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 422 "pitparser.mly"
        ( PGFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 1928 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 424 "pitparser.mly"
        ( PGFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 1936 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 426 "pitparser.mly"
        ( PGFunApp(("event",parse_extent()), _3), parse_extent() )
# 1943 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 428 "pitparser.mly"
        ( PGFunApp(("inj-event",parse_extent()), _3), parse_extent() )
# 1950 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gterm) in
    Obj.repr(
# 430 "pitparser.mly"
        ( PGFunApp(("table",parse_extent()), [_3]), parse_extent() )
# 1957 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 432 "pitparser.mly"
        ( PGFunApp(("==>", parse_extent()), [_1;_3]), parse_extent() )
# 1965 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 434 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PGTuple (l), parse_extent() )
# 1975 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'bindingseq) in
    Obj.repr(
# 439 "pitparser.mly"
        ( PGName (_2, _4), parse_extent() )
# 1983 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 441 "pitparser.mly"
        ( PGName (_2, []), parse_extent() )
# 1990 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 443 "pitparser.mly"
        ( PGLet(_2, _4, _6), parse_extent() )
# 1999 "pitparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 447 "pitparser.mly"
 ( _1 :: _3 )
# 2007 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 449 "pitparser.mly"
 ( [_1] )
# 2014 "pitparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 453 "pitparser.mly"
        ( _1 )
# 2021 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 455 "pitparser.mly"
        ( [] )
# 2027 "pitparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 460 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 2036 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 462 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 2044 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 464 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 2053 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 466 "pitparser.mly"
        ( [(_1, _3)] )
# 2061 "pitparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 470 "pitparser.mly"
        ( _1 )
# 2068 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 472 "pitparser.mly"
        ( [] )
# 2074 "pitparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tfnebindingseq) in
    Obj.repr(
# 478 "pitparser.mly"
        ( BFLet(_2, _4, _6) )
# 2083 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 480 "pitparser.mly"
        ( BFNoUnif((_1,_3,_5), _6) )
# 2093 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 482 "pitparser.mly"
        ( BFNoUnif((_1,[],-1),_2) )
# 2101 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformatseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'optphase) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optint) in
    Obj.repr(
# 484 "pitparser.mly"
        ( BFNoUnif((("table", parse_extent()),_3,_5), _6) )
# 2110 "pitparser.ml"
               : 'tfnebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 488 "pitparser.mly"
    ( _2 )
# 2117 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    Obj.repr(
# 490 "pitparser.mly"
    ( -1 )
# 2123 "pitparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 494 "pitparser.mly"
    ( _2 )
# 2130 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    Obj.repr(
# 496 "pitparser.mly"
    ( -1 )
# 2136 "pitparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 500 "pitparser.mly"
 ( PFGFunApp (_1, _3), parse_extent() )
# 2144 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'gformat) in
    Obj.repr(
# 502 "pitparser.mly"
 ( PFGFunApp (("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2152 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 504 "pitparser.mly"
 ( PFGIdent (_1), parse_extent() )
# 2159 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 506 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PFGTuple (_2), parse_extent() )
# 2169 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'fbindingseq) in
    Obj.repr(
# 511 "pitparser.mly"
        ( PFGName (_2, _4), parse_extent() )
# 2177 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 513 "pitparser.mly"
        ( PFGName (_2, []), parse_extent() )
# 2184 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 515 "pitparser.mly"
        ( PFGAny (_2), parse_extent() )
# 2191 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 517 "pitparser.mly"
        ( PFGLet(_2, _4, _6), parse_extent() )
# 2200 "pitparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 522 "pitparser.mly"
 ( _1 :: _3 )
# 2208 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 524 "pitparser.mly"
 ( [_1] )
# 2215 "pitparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 528 "pitparser.mly"
        ( _1 )
# 2222 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 530 "pitparser.mly"
        ( [] )
# 2228 "pitparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 535 "pitparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 2237 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 537 "pitparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 2245 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 539 "pitparser.mly"
        ( (_1, _3) :: _5 )
# 2254 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 541 "pitparser.mly"
        ( [(_1, _3)] )
# 2262 "pitparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 545 "pitparser.mly"
        ( _1 )
# 2269 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 547 "pitparser.mly"
        ( [] )
# 2275 "pitparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 553 "pitparser.mly"
 ( (_1,_3, false) )
# 2283 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    Obj.repr(
# 556 "pitparser.mly"
 ( (_1,_3, true) )
# 2291 "pitparser.ml"
               : 'mayfailvartype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nemayfailvartypeseq) in
    Obj.repr(
# 560 "pitparser.mly"
 ( _1::_3 )
# 2299 "pitparser.ml"
               : 'nemayfailvartypeseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mayfailvartype) in
    Obj.repr(
# 563 "pitparser.mly"
 ( [_1] )
# 2306 "pitparser.ml"
               : 'nemayfailvartypeseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nemayfailvartypeseq) in
    Obj.repr(
# 567 "pitparser.mly"
        ( _1 )
# 2313 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 569 "pitparser.mly"
        ( [] )
# 2319 "pitparser.ml"
               : 'mayfailvartypeseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'nemayfailvartypeseq) in
    Obj.repr(
# 573 "pitparser.mly"
 ( _2 )
# 2326 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    Obj.repr(
# 575 "pitparser.mly"
 ( [] )
# 2332 "pitparser.ml"
               : 'forallmayfailvartype))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 580 "pitparser.mly"
 ( (_2,_3,_5) :: _6 )
# 2342 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 582 "pitparser.mly"
 ( [_2,_3,_5] )
# 2351 "pitparser.ml"
               : 'treducotherwise))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.term_e) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'treducotherwise) in
    Obj.repr(
# 586 "pitparser.mly"
 ( (_1,_2,_4) :: _5 )
# 2361 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 588 "pitparser.mly"
 ( [_1,_2,_4] )
# 2370 "pitparser.ml"
               : 'treducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'treduc) in
    Obj.repr(
# 592 "pitparser.mly"
 ( (_1,_2,_4) :: _6 )
# 2380 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 594 "pitparser.mly"
 ( [_1,_2,_4] )
# 2389 "pitparser.ml"
               : 'treduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 600 "pitparser.mly"
    ( [(_1, _2, _4)] )
# 2398 "pitparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'forallvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.term_e) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'eqlist) in
    Obj.repr(
# 602 "pitparser.mly"
    ( (_1, _2, _4)::_6 )
# 2408 "pitparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 608 "pitparser.mly"
        ( PClause(_1,_3) )
# 2416 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 610 "pitparser.mly"
        ( PFact(_1) )
# 2423 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 612 "pitparser.mly"
        ( PEquiv(_1,_3,true) )
# 2431 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.term_e) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.term_e) in
    Obj.repr(
# 614 "pitparser.mly"
        ( PEquiv(_1,_3,false) )
# 2439 "pitparser.ml"
               : 'tclause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tclause) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'tclauses) in
    Obj.repr(
# 618 "pitparser.mly"
 ( (_1,_2) :: _4 )
# 2448 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'forallmayfailvartype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tclause) in
    Obj.repr(
# 620 "pitparser.mly"
 ( [_1,_2] )
# 2456 "pitparser.ml"
               : 'tclauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    Obj.repr(
# 626 "pitparser.mly"
 ( _2 )
# 2463 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 628 "pitparser.mly"
 ( PLetDef (_1,[]) )
# 2470 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 630 "pitparser.mly"
        ( PLetDef (_1, _3) )
# 2478 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 632 "pitparser.mly"
 ( PRepl _2 )
# 2485 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Pitptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 634 "pitparser.mly"
 ( (* For convergence with CryptoVerif, we allow an identifier (bound on the number of copies) after a replication; it is simply ignored in ProVerif. *)
          PRepl _5 )
# 2495 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 637 "pitparser.mly"
 ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 2504 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 641 "pitparser.mly"
        ( (* For convergence with CryptoVerif, we allow yield instead of 0 *)
          PNil )
# 2511 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'newarg) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'typeid) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 644 "pitparser.mly"
 ( PRestr(_2, _3, _5, _6) )
# 2521 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 646 "pitparser.mly"
 ( PTest(_2,_4,_5) )
# 2530 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 648 "pitparser.mly"
 ( PInput(_3,_5,_7) )
# 2539 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 650 "pitparser.mly"
 ( POutput(_3,_5,_7) )
# 2548 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 652 "pitparser.mly"
 ( PLet(_2,_4,PNil,PNil) )
# 2556 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 654 "pitparser.mly"
 ( PLet(_2,_4,_6,_7) )
# 2566 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 656 "pitparser.mly"
        ( PLetFilter(_2,_4,PNil,PNil) )
# 2574 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'tprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 658 "pitparser.mly"
        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_7) )
# 2586 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 662 "pitparser.mly"
        ( PInsert(_2, _4, _6) )
# 2595 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tpatternseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 664 "pitparser.mly"
        ( PGet(_2, _4, None, _6, _7) )
# 2605 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tpatternseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'optinprocess) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'optelseprocess) in
    Obj.repr(
# 666 "pitparser.mly"
        ( PGet(_2, _4, Some _7, _8, _9) )
# 2616 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tprocess) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 668 "pitparser.mly"
 ( PPar(_1,_3) )
# 2624 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'ptermseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'newarg) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 670 "pitparser.mly"
        ( PEvent(_2, _4, _6, _7) )
# 2634 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'newarg) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 672 "pitparser.mly"
        ( PEvent(_2, [], _3, _4) )
# 2643 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 674 "pitparser.mly"
        ( if (_2) <= 0 then
	    input_error "Phases should be positive integers in processes" (parse_extent());
          PPhase(_2, _3) )
# 2653 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 678 "pitparser.mly"
        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, None, _3) )
# 2664 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opttprocess) in
    Obj.repr(
# 683 "pitparser.mly"
        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, Some _4, _6) )
# 2676 "pitparser.ml"
               : 'tprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 690 "pitparser.mly"
        ( _2 )
# 2683 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 692 "pitparser.mly"
        ( PNil )
# 2689 "pitparser.ml"
               : 'opttprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 696 "pitparser.mly"
        ( _2 )
# 2696 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 698 "pitparser.mly"
        ( PNil )
# 2702 "pitparser.ml"
               : 'optinprocess))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'tprocess) in
    Obj.repr(
# 702 "pitparser.mly"
        ( _2 )
# 2709 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 704 "pitparser.mly"
        ( PNil )
# 2715 "pitparser.ml"
               : 'optelseprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 708 "pitparser.mly"
    ( PPatVar(_1, None) )
# 2722 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typeid) in
    Obj.repr(
# 710 "pitparser.mly"
    ( PPatVar(_1, Some _3) )
# 2730 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 712 "pitparser.mly"
    ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPatTuple(_2) )
# 2740 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'tpatternseq) in
    Obj.repr(
# 717 "pitparser.mly"
    ( PPatFunApp(_1,_3) )
# 2748 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 719 "pitparser.mly"
    ( PPatEqual(_2) )
# 2755 "pitparser.ml"
               : 'tpattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tpattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 723 "pitparser.mly"
    ( _1 :: _3 )
# 2763 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tpattern) in
    Obj.repr(
# 725 "pitparser.mly"
    ( [_1] )
# 2770 "pitparser.ml"
               : 'nepatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nepatternseq) in
    Obj.repr(
# 729 "pitparser.mly"
    ( _1 )
# 2777 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 731 "pitparser.mly"
    ( [] )
# 2783 "pitparser.ml"
               : 'tpatternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 737 "pitparser.mly"
 ( PPFunApp (_1, _3), parse_extent() )
# 2791 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'pterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 739 "pitparser.mly"
        ( Param.has_choice := true; 
	  PPFunApp(("choice", parse_extent()), [_3; _5]), parse_extent() )
# 2800 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 742 "pitparser.mly"
 ( PPIdent (_1), parse_extent() )
# 2807 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 744 "pitparser.mly"
        ( PPFunApp(("=", parse_extent()), [_1; _3]), parse_extent() )
# 2815 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 746 "pitparser.mly"
        ( PPFunApp(("<>", parse_extent()), [_1; _3]), parse_extent() )
# 2823 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pterm) in
    Obj.repr(
# 748 "pitparser.mly"
        ( PPFunApp(("not", parse_extent()), [_3]), parse_extent() )
# 2830 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 750 "pitparser.mly"
        ( PPFunApp(("||", parse_extent()), [_1; _3]), parse_extent() )
# 2838 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 752 "pitparser.mly"
        ( PPFunApp(("&&", parse_extent()), [_1; _3]), parse_extent() )
# 2846 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'newarg) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'typeid) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 754 "pitparser.mly"
 ( PPRestr(_2, _3, _5, _7), parse_extent() )
# 2856 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 756 "pitparser.mly"
 ( PPTest(_2,_4,None), parse_extent() )
# 2864 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 758 "pitparser.mly"
 ( PPTest(_2,_4,Some _6), parse_extent() )
# 2873 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 760 "pitparser.mly"
 ( PPLet(_2,_4,_6,None), parse_extent() )
# 2882 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'tpattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 762 "pitparser.mly"
 ( PPLet(_2,_4,_6,Some _8), parse_extent() )
# 2892 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 764 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,None), parse_extent() )
# 2901 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'nevartype) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'pterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 766 "pitparser.mly"
        ( PPLetFilter(_2,_4,_6,Some _8), parse_extent() )
# 2911 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'ptermseq) in
    Obj.repr(
# 768 "pitparser.mly"
 ( match _2 with
	  [t] -> t   (* Allow parentheses for priorities of infix operators;
			Tuples cannot have one element. *)
	| l -> PPTuple (l), parse_extent() )
# 2921 "pitparser.ml"
               : 'pterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 775 "pitparser.mly"
 ( _1 :: _3 )
# 2929 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pterm) in
    Obj.repr(
# 777 "pitparser.mly"
 ( [_1] )
# 2936 "pitparser.ml"
               : 'neptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'neptermseq) in
    Obj.repr(
# 781 "pitparser.mly"
        ( _1 )
# 2943 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 783 "pitparser.mly"
        ( [] )
# 2949 "pitparser.ml"
               : 'ptermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 789 "pitparser.mly"
    ( _1 )
# 2956 "pitparser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 791 "pitparser.mly"
    ( _1 )
# 2963 "pitparser.ml"
               : 'tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tag) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tag) in
    Obj.repr(
# 795 "pitparser.mly"
    ( [_1;_3] )
# 2971 "pitparser.ml"
               : 'onepermut))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tag) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'onepermut) in
    Obj.repr(
# 797 "pitparser.mly"
    ( _1 :: _3 )
# 2979 "pitparser.ml"
               : 'onepermut))
; (fun __caml_parser_env ->
    Obj.repr(
# 801 "pitparser.mly"
    ( [] )
# 2985 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'onepermut) in
    Obj.repr(
# 803 "pitparser.mly"
    ( [_1] )
# 2992 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'onepermut) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident list list) in
    Obj.repr(
# 805 "pitparser.mly"
    ( _1 :: _3 )
# 3000 "pitparser.ml"
               : Pitptree.ident list list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Pitptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident list) in
    Obj.repr(
# 813 "pitparser.mly"
    ( _1 :: _3 )
# 3008 "pitparser.ml"
               : Pitptree.ident list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Pitptree.ident) in
    Obj.repr(
# 815 "pitparser.mly"
    ( [_1] )
# 3015 "pitparser.ml"
               : Pitptree.ident list))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry lib *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry permut *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry order *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry term *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Pitptree.tdecl list * Pitptree.tprocess * Pitptree.tprocess option)
let lib (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Pitptree.tdecl list)
let permut (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 3 lexfun lexbuf : Pitptree.ident list list)
let order (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 4 lexfun lexbuf : Pitptree.ident list)
let term (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 5 lexfun lexbuf : Pitptree.term_e)
